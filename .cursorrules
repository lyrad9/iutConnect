<context>
You are an AI embed in a project that use:
- Next.js
- React
- TailwindCSS
- Shadcn ui
- Convex
</context>

<project>

# Name of project

University Social Network

## Overview

provide students with a secure, intuitive, and responsive platform to foster communication and collaboration on campus. The goal is to allow everyone to connect, exchange messages, participate in thematic groups, and learn about university events

## key features

### Authentification

### Gestion des utilisateurs

Un utilisateur est identifié par:
-photo de profil(optionnelle)

- Le nom de l'utilisateur
- Le prenom de l'utilisateur
- L'email de l'utilisateur
- Le matricule de l'utilisateur
- Le numéro de téléphone de l'utilisateur
- La fonction de l'utilisateur(étudiant, professeur, comptable, RH, etc.)
- La filière de l'utilisateur(pour l'étudiant)
- La salle de l'utilisateur(pour l'étudiant)
- Le statut de l'utilisateur(actif, inactif, en attente). Qui détermine si l'utilisateur peut se connecter à l'application.
- Le rôle de l'utilisateur(USER, ADMIN, SUPERADMIN)
- Les permissions de l'utilisateur. Par défaut, un user a comme permissions: COMMENT, LIKE. Certaines permissions comme : CREATE GROUP, CREATE EVENT, CREATE POST, CREATE USER et ALL peuvent être ajoutées par l'administrateur.
- Centres d'intérêt de l'utilisateur(optionnel)
- Des liens externes comme lien pour son site personnel, linkedln(optionnel).
- La biographie de l'utilisateur(optionnel)
- Les skills(marketing, communication, dev typescript, etc.) de l'utilisateur(optionnel)

1. **Inscription et validation**

- Un utilisateur s'inscrit avec ses informations personnelles(poto de profil,nom, prenom, email, matricule, numéro de téléphone, choix de sa fonction, filière et salle(pour les étudiants uniquement))
- Un administrateur valide l'inscription(via mail ou in-app).
- L'utilisateur reçoit une notification d'activation(via mail)

2. **Profil utilisateur**

- Un utilisateur consulte/modifie son profil
- Un utilisateur définit ses centres d'intérêt, ses compétences professionnelles, ses skills et sa biographie

3. **Gestion des permissions**

- Un administrateur attribue des permissions à un utilisateur
- Un administrateur nomme un utilisateur comme administrateur

### Gestion des groupes

Il existe deux types de groupes : **Salon de discussion** et **forums**
Un forum contrairement à un salon de discussion est un groupe où les utilisateurs peuvent publier du contenu et des évènements. Les salons de discussion permettront uniquement aux élèves de dialoguer et de s’échanger des informations un peu comme dans les groupes whatsapp.

Un forum est identifié par:

- photo de profil
- photo de couverture
- son nom
- sa description(briève max 100 mots, optionnel)
- à propos du groupe(description longue:max 500 mots)
- Les centres d'intérêt du groupe(Académique, Technologie, Sport, Social,etc..)
- La catégorie principale du groupe(Académique, Technologie, Sport, Social,etc..)
- Etat(actif, suspendu)
- Statut (public ou privé)
- son statut (actif ou inactif)

Un salon de discussion est identifié par:

- photo de profil
- photo de couverture
- son nom
- sa description(briève max 100 mots, optionnel)
- à propos du groupe(description longue:max 500 mots)
- sa filière(ex: Génie Logiciel, Administration réseau et systèmes, etc.)
- son type (public ou privé)
- sa classe (e.g: GL3C, GL2C, ASR1, etc.)
- son statut (actif ou inactif)

### Gestion des salles de fêtes

Une salle de fête est caractérisée par : son nom, sa description, son localisation, capacité(e.g:200 places), son prix(pour une nuit), une taxe de séjour par nuitée et ses photos, la date de création et de modification, sa ville ainsi que son agence, le type d'évènement qui peut être plusieurs (Mariage, Anniversaire, etc...).
L'utilisateur peut rechercher et filtrer des salle de fêtes à travers sa ville, capacité, type d'évènement, prix

### Gestion des utilisateurs

Un utilisateur est caractérisé par son nom, prénom, email, password, date de création, date de modification, photo, et son rôle(ADMIN, MANAGER).

### Gestion des managers

Lors de l'inscription, il remplit toutes ces informations puis il valide. c'est à l'admin de valider l'utilisateur.
Lorsque l'admin le valide il reçoit un mail, avec ses identifiants (mot de passe).
A la connexion, il entre son email et son mot de passe.
Le manager peut ajouter, modifier, supprimer des agences, des salles de fête, des locations.

### Gestion des agences

Un agence est caractérisé par son logo, nom, description, ville, téléphone, localisation, email,ses banières, matricule agence, date de création, date de modification,manager.

## Use case

Processus de réservation « idéal » (du visiteur au manager)

    Recherche & sélection

        Visiteur choisit dates + type de prestation → le système vérifie en temps réel la dispo.

    Formulaire de réservation

        Saisie des coordonnées minimales + validation conditions générales.

        ↳ Création d’une réservation « en attente de confirmation » dans la base (statut = pending).

    Notification au client
        Envoi d’un email(e.g: votre réservation a été prise en compte, nous confirmerons votre demande dans les prochains 24H)

    Notification manager

        Envoi d’un email au manager/responsable (e.g: les détails de la réservation).

    Validation par le manager

        Manager consulte les détails, accepte ou refuse.

        Si acceptation → statut de la location passe à unavailable et la réservation à « accepted ».



        Envoi d'un mail à l'utilisateur (e.g: la réservation a été validée, nous vous remercions de votre confiance).

    Confirmation de l'utilisateur:
        L'utilisateur confirme sa réservation à travers son email, le statut de la réservation  passe à « booked ».

## Underlying stack

**Laravel 12**
**Blade/Livewire**
**Alpine.js**
**MySQL**
**Tailwind CSS**

## Project structure

**/app**

- **Objectif :** Contient la logique métier principale de l'application, suivant le modèle MVC.
- **Contenu :**
  - Modèles (ex. Agence.php, Location.php, User.php)
  - Contrôleurs (dans Http/Controllers)
  - Middleware (dans Http/Middleware)
  - Services et utilitaires
- **Techno :** PHP, Laravel
- **Bonnes pratiques :**
  - Suivre les conventions de nommage PSR-4
  - Un modèle par entité
  - Utiliser les traits pour la réutilisation de code
- **Améliorations :**

  - Ajouter des repositories pour séparer la logique d'accès aux données
  - Implémenter des services pour les opérations complexes

- **/app/Models**

  - **Objectif :** Contient les modèles Eloquent qui représentent les tables de la base de données.
  - **Contenu :**
    - EventHall.php (Salles de fêtes)
    - Agence.php
    - Location.php (Locations)
    - User.php
    - Ville.php
  - **Techno :** Eloquent ORM, PHP
  - **Bonnes pratiques :**
    - Définir les relations entre modèles clairement
    - Utiliser les scopes pour les requêtes fréquentes
    - Définir les propriétés $fillable ou $guarded
  - **Améliorations :**
    - Ajouter des modèles manquants (Reservation, Task, Notification)

- **/app/Http/Controllers**

  - **Objectif :** Contient les contrôleurs qui gèrent les requêtes HTTP
  - **Contenu :**
    - Contrôleurs pour chaque entité (AgenceController, LocationController, etc.)
    - Contrôleurs d'authentification
  - **Techno :** Laravel, PHP
  - **Bonnes pratiques :**
    - Limiter les méthodes à 7 actions RESTful standards
    - Valider les entrées avec Request
    - Renvoyer des réponses formatées
  - **Améliorations :**
    - Implémenter une API REST complète
    - Utiliser des Resource classes pour la transformation de données

- **/config**

  - **Objectif :** Contient les fichiers de configuration de l'application
  - **Contenu :**
    - Fichiers de configuration (\*.php)
    - Configuration de la BDD, mail, services externes
  - **Techno :** PHP
  - **Bonnes pratiques :**
    - Ne pas stocker de secrets directement dans les fichiers
    - Utiliser des variables d'environnement
  - **Améliorations :**
    - Documentation des options disponibles

- **/database**

  - **Objectif :** Contient les migrations, seeders et factories pour la base de données
  - **Contenu :**
    - Migrations (création de tables)
    - Seeders (données de test)
    - Factories (génération de données)
  - **Techno :** PHP, Laravel Migrations
  - **Bonnes pratiques :**
    - Nommer les migrations de façon descriptive
    - Documenter les champs complexes
    - Prévoir les rollbacks
  - **Améliorations :**
    - Ajouter plus de seeders pour faciliter le développement
    - Mettre à jour les migrations avec les nouvelles fonctionnalités

- **/public**

  - **Objectif :** Point d'entrée de l'application et stockage des fichiers publics
  - **Contenu :**
    - index.php (point d'entrée)
    - CSS, JS compilés
    - Images et médias accessibles publiquement
  - **Techno :** PHP, Assets web
  - **Bonnes pratiques :**
    - Ne pas stocker de code applicatif dans ce dossier
    - Organiser les assets par type
  - **Améliorations :**
    - Optimiser les images pour le web
    - Mettre en place un CDN pour les assets statiques

- **/resources**

  - **Objectif :** Contient les fichiers de ressources non compilés
  - **Contenu :**
    - Vues Blade (\*.blade.php)
    - CSS/SCSS source
    - JavaScript non compilé
    - Fichiers de langue
  - **Techno :** Blade, CSS, JavaScript, Alpine.js
  - **Bonnes pratiques :**
    - Organiser les vues par section
    - Utiliser des composants réutilisables
    - Séparer la logique et la présentation
  - **Améliorations :**
    - Implémenter des composants Blade/Livewire

- **/routes**

  - **Objectif :** Définit les routes de l'application
  - **Contenu :**
    - web.php (routes web)
    - api.php (routes API)
    - console.php (commandes personnalisées)
    - auth.php (routes d'authentification)
  - **Techno :** Laravel Routes
  - **Bonnes pratiques :**
    - Grouper les routes par préfixe ou middleware
    - Nommer les routes
    - Utiliser des contrôleurs dédiés
  - **Améliorations :**
    - Organiser les routes par domaine fonctionnel
    - Ajouter une documentation des API

- **/storage**

  - **Objectif :** Stockage des fichiers générés par l'application
  - **Contenu :**
    - Logs
    - Fichiers téléchargés
    - Cache
    - Sessions
  - **Techno :** Laravel Storage
  - **Bonnes pratiques :**
    - Configurer correctement les permissions
    - Utiliser le système de disques de Laravel
  - **Améliorations :**
    - Mettre en place une stratégie de rotation des logs
    - Configurer un stockage cloud pour les uploads

- **/tests**

  - **Objectif :** Contient les tests automatisés
  - **Contenu :**
    - Tests unitaires
    - Tests fonctionnels
    - Tests d'intégration
  - **Techno :** PHPUnit, Laravel Testing
  - **Bonnes pratiques :**
    - Couvrir les fonctionnalités critiques
    - Organiser les tests par fonctionnalité
    - Utiliser des factories pour générer des données de test
  - **Améliorations :**
    - Augmenter la couverture de tests
    - Ajouter des tests d'interface utilisateur

- **/vendor**
  - **Objectif :** Contient les dépendances installées par Composer
  - **Contenu :**
    - Packages externes
    - Laravel framework
    - Bibliothèques PHP
  - **Techno :** Composer
  - **Bonnes pratiques :**
    - Ne jamais modifier directement les fichiers
    - Exclure du contrôle de version
    - Utiliser composer.lock pour des installations cohérentes
  - **Améliorations:**
    - Régulièrement mettre à jour les dépendances
    - Auditer les dépendances pour des problèmes de sécurité

</project>
