---
description:
globs:
alwaysApply: true
---

# Guide d'utilisation de nuqs

## Introduction

[nuqs](mdc:https:/github.com/47ng/nuqs) est une bibliothèque qui synchronise l'état React avec l'URL. Dans notre application, elle permet:

- Partager des liens avec filtres/recherche déjà appliqués
- Conserver l'état lors de la navigation ou des actualisations

## Configuration de base

```tsx
// app/layout.tsx
import { NuqsAdapter } from "nuqs/adapters/next/app";

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <NuqsAdapter>{children}</NuqsAdapter>
      </body>
    </html>
  );
}
```

## Usage

import { useQueryState } from 'nuqs'

```tsx
const [name, setName] = useQueryState("name");
```

## Options

Options can be passed at the hook level via the builder pattern:
option `transition`

```tsx
// 1. Provide your own useTransition hook:
const [isLoading, startTransition] = React.useTransition();
const [query, setQuery] = useQueryState(
  "query",
  // 2. Pass the `startTransition` as an option:
  parseAsString().withOptions({ startTransition, shallow: false })
);
```

## Hooks disponibles

### useSearch

```tsx
const { query, setQuery } = useSearch();
// query: texte de recherche actuel
// setQuery: fonction pour mettre à jour la recherche
```

### usePagination

```tsx
const { page, setPage, limit, setLimit } = usePagination();
// Contrôle la page actuelle et le nombre d'éléments par page
```

### useEventFilters

```tsx
const { filters, toggleCategory, setDateRange } = useEventFilters();
// Gestion avancée de multiples filtres d'événements
```

## Côté serveur

```tsx
// Dans un composant serveur (Server Component)
const searchParamsCache = createSearchParamsCache({
  q: parseAsString.withDefault(""),
  page: parseAsInteger.withDefault(1),
});

export default async function Page({ searchParams }) {
  const { q, page } = await searchParamsCache.parse(searchParams);
  // Utilisation dans la logique de la page...
}
```

## Bonnes pratiques

1. Utilisez `.withDefault()` pour les valeurs par défaut
2. Activez le throttling pour éviter trop de mises à jour: `throttleMs: 500`
3. Utilisez `shallow: true` pour éviter les rechargements complets
   Par défaut, les mises à jour de l'état des requêtes sont effectuées en priorité par le client : aucun appel réseau n'est effectué vers le serveur.

Cela équivaut à définir l'option shallow du routeur Next.js sur true.

4. Utilisez `shallow:false` pour activer la notification du serveur lors des mises à jour des requêtes.

5. Utilisez le hook useTransition de React pour obtenir les états de chargement pendant que le serveur réaffiche les composants du serveur avec l'URL mise à jour.

## Ressources

- [Documentation officielle de nuqs](mdc:https:/nuqs.47ng.com)
- [GitHub de nuqs](mdc:https:/github.com/47ng/nuqs)
